openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/users/{id}:
    put:
      tags:
      - user-controller
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/posts/{id}:
    put:
      tags:
      - post-controller
      operationId: updatePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - post-controller
      operationId: deletePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/posts/{id}/like:
    put:
      tags:
      - post-controller
      operationId: likePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LikeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/validate-token:
    post:
      tags:
      - auth-controller
      operationId: validateToken
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/register:
    post:
      tags:
      - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/logout:
    post:
      tags:
      - auth-controller
      operationId: logout
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/follow:
    post:
      tags:
      - user-controller
      operationId: followUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/posts:
    get:
      tags:
      - post-controller
      operationId: getPosts
      parameters:
      - name: filter
        in: query
        required: true
        schema:
          type: string
      - name: scope
        in: query
        required: true
        schema:
          type: string
      - name: iduser
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/comments:
    post:
      tags:
      - comment-controller
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users/username/{username}:
    get:
      tags:
      - user-controller
      operationId: getUserByUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/posts/{id}/is-liked:
    get:
      tags:
      - post-controller
      operationId: userLikeToPost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: idUser
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/posts/user/{username}:
    get:
      tags:
      - post-controller
      operationId: getPostsByUserId
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/comments/post/{idPost}:
    get:
      tags:
      - comment-controller
      operationId: getCommentsByPostId
      parameters:
      - name: idPost
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/unfollow:
    delete:
      tags:
      - user-controller
      operationId: unfollowUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnfollowRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    UserRequestDTO:
      type: object
      properties:
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
        imageUrl:
          type: string
        biography:
          type: string
        cellphone:
          type: string
        birthday:
          type: string
          format: date
        password:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        post:
          $ref: "#/components/schemas/Post"
        user:
          $ref: "#/components/schemas/User"
        mentionedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          uniqueItems: true
        body:
          type: string
        datetime:
          type: string
          format: date-time
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          $ref: "#/components/schemas/User"
        comment:
          $ref: "#/components/schemas/Comment"
        post:
          $ref: "#/components/schemas/Post"
        userTrigger:
          $ref: "#/components/schemas/User"
        notificationType:
          $ref: "#/components/schemas/NotificationType"
        message:
          type: string
        seen:
          type: boolean
        createdAt:
          type: string
          format: date-time
    NotificationType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        notification:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int32
        user:
          $ref: "#/components/schemas/User"
        body:
          type: string
        imageUrl:
          type: string
        datetime:
          type: string
          format: date-time
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        mentionedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        usersReacted:
          type: array
          items:
            $ref: "#/components/schemas/User"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
          uniqueItems: true
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        imageUrl:
          type: string
        biography:
          type: string
        cellphone:
          type: string
        birthday:
          type: string
          format: date
        role:
          type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
        following:
          type: array
          items:
            $ref: "#/components/schemas/User"
        followers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        mentionedPosts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        mentionedComments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        enabled:
          type: boolean
        authorities:
          type: array
          items:
            $ref: "#/components/schemas/GrantedAuthority"
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
    LikeRequest:
      type: object
      properties:
        idUser:
          type: integer
          format: int32
    RegisterRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        imageUrl:
          type: string
        biography:
          type: string
        cellphone:
          type: string
        birthday:
          type: string
          format: date
        role:
          type: string
          enum:
          - ADMIN
          - USER
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    FollowRequestDTO:
      type: object
      properties:
        username:
          type: string
        usernameFollowed:
          type: string
    PostRequestDTO:
      type: object
      properties:
        username:
          type: string
        body:
          type: string
        imageUrl:
          type: string
        datetime:
          type: string
          format: date-time
    CommentRequestDTO:
      type: object
      properties:
        username:
          type: string
        body:
          type: string
        idPost:
          type: integer
          format: int32
        datetime:
          type: string
          format: date-time
    UnfollowRequestDTO:
      type: object
      properties:
        username:
          type: string
        usernameUnfollowed:
          type: string
